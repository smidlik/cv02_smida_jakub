#version 430
#extension GL_ARB_compute_shader : enable
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout (rgba32f, binding = 0) 
	uniform readonly image2D inImage;

layout (rgba32f, binding = 1) 
	uniform writeonly image2D outImage;

int life(vec2 xy){
	if ((imageLoad(inImage, ivec2(xy)).r) >= 0.3) return 1;
	return 0;
} 
void main () {
 	vec4 pixel;
    ivec2 pixel_coords;
    // pixel_coords = ivec2(gl_LocalInvocationID.xy);
 
   	pixel_coords = ivec2(gl_GlobalInvocationID.xy);
 
 	pixel = imageLoad(inImage, pixel_coords);
 
	imageStore(outImage, pixel_coords, vec4(pixel.r, pixel.b, pixel.g, 1.0));
	
	int a0 = life(pixel_coords);
	int sum  = life(pixel_coords + ivec2(1,0))
			+ life(pixel_coords - ivec2(1,0))
			+ life(pixel_coords + ivec2(0,1))
			+ life(pixel_coords - ivec2(0,1))
			+ life(pixel_coords + ivec2(1,1))
			+ life(pixel_coords - ivec2(1,1))
			+ life(pixel_coords + ivec2(-1,1))
			+ life(pixel_coords + ivec2(1,-1));
	

	
	if (a0 == 0 && sum == 3) {
		imageStore(outImage, pixel_coords, vec4(1.0, 0.5, 0.5, 1.0));
	}

	if (a0 == 1 && (sum < 2 || sum > 3 )) {
		imageStore(outImage, pixel_coords, vec4(0.0, 0.2 * pixel.b, 0.7 * pixel.g, 1.0));
	}
	
	
	if (a0 == 1 && sum >= 2 && sum <= 3 ) {
		imageStore(outImage, pixel_coords, vec4(1.0, 0.7 * pixel.b, 0.2 * pixel.g, 1.0));
	}

}
